{"version":3,"sources":["styles/Header.js","CONSTANTS.js","components/Header.js","styles/ProjectsHeader.js","components/ProjectsHeader.js","styles/ProjectCard.js","styles/Form.js","components/ProjectForm.js","components/DeleteConfirm.js","actions/projects/ProjectTypes.js","actions/columns/ColumnTypes.js","actions/columns/ColumnActions.js","actions/tasks/TaskTypes.js","actions/tasks/TaskActions.js","components/ProjectCard.js","actions/projects/ProjectActions.js","components/ProjectCards.js","pages/Home.js","components/ColumnForm.js","components/ColumnHeader.js","components/TaskForm.js","components/TaskCard.js","selectors/index.js","components/Column.js","components/ColumnAdder.js","styles/Global.js","pages/NotFound.js","pages/Project.js","reducers/ProjectReducer.js","reducers/ColumnReducer.js","reducers/TaskReducer.js","reducers/index.js","Store.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderStyles","makeStyles","nav","display","justifyContent","TASK","COLUMN","BASEURL","Header","classes","AppBar","position","Toolbar","className","Typography","variant","IconButton","to","color","component","NavLink","href","GitHub","ProjectsHeaderStyles","projectsHeader","projectDivider","height","marginTop","marginBottom","ProjectsHeader","toggleModal","Button","onClick","startIcon","AddCircle","Divider","ProjectCardStyles","theme","projectCardActions","projectCard","flexDirection","projectCardContent","flexGrow","FormStyles","input","spacing","title","textAlign","ProjectForm","id","name","submit","open","history","useHistory","useState","values","setValues","useEffect","Dialog","fullWidth","onClose","DialogTitle","onSubmit","event","preventDefault","push","DialogContent","TextField","onChange","target","value","prevState","required","label","DialogActions","type","DeleteConfirm","handleDelete","item","toggleAlert","DialogContentText","toLowerCase","ADDPROJECT","DELETEPROJECT","UPDATEPROJECT","ADDCOLUMN","REMOVECOLUMNS","UPDATECOLUMN","REORDERCOLUMNS","removeColumns","field","func","dispatch","payload","ADDTASK","UPDATETASK","REMOVETASKS","REORDERTASKS","removeTasks","mapDispatchToProps","deleteProject","updateProject","data","connect","openForm","setOpenForm","openAlert","setOpenAlert","prev","closeAlert","Grid","xs","sm","md","Card","CardContent","gutterBottom","CardActions","Edit","Delete","Link","ProjectCards","projects","container","map","addProject","proj","uuidv4","state","setOpen","Container","maxWidth","description","ColumnForm","projectID","useParams","updateColumn","Box","alignItems","style","overflow","textOverflow","columnID","handleChange","updateTask","index","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","fontWeight","getProjectID","obj","match","params","selectProjectColumns","createSelector","columns","cols","filter","col","selectColumnTasks","props","tasks","task","selectProject","find","sections","addTask","ownProps","openTask","setOpenTask","toggleTaskModal","width","marginRight","size","Add","droppableId","droppableProps","placeholder","addColumn","GlobalStyles","btn","margin","toolbar","mixins","NotFound","reorderTasks","reorderColumns","project","onDragEnd","destination","source","direction","intialState","initalState","initialState","combineReducers","column","findIndex","splice","persistConfig","key","storage","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","persistStore","App","exact","path","Home","Project","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d913d1da.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const HeaderStyles = makeStyles(() => ({\r\n\r\n    nav: {\r\n        display:'flex',\r\n        justifyContent:\"space-between\"\r\n\r\n        \r\n      },\r\n}))\r\n\r\n","export const TASK = \"TASK\"\r\nexport const COLUMN = \"COLUMN\"\r\nexport const BASEURL = \"/TaskHubDraft\"","import React from 'react'\r\nimport { AppBar, Toolbar,Typography, IconButton } from '@material-ui/core';\r\nimport { HeaderStyles } from '../styles/Header';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { GitHub, Home } from '@material-ui/icons';\r\nimport {BASEURL} from '../CONSTANTS'\r\n\r\nconst Header = () => {\r\n\r\n     const classes = HeaderStyles()\r\n    return (\r\n            <AppBar position = \"fixed\">\r\n<Toolbar  className = {classes.nav} >\r\n    <Typography variant = \"h6\">\r\n        Taskhub\r\n    </Typography>\r\n    <div>\r\n\r\n           <IconButton to = {BASEURL} color = \"inherit\" component = {NavLink}>\r\n               <Home />\r\n           </IconButton>\r\n        <IconButton href = {`https://github.com/kingfishergod/${BASEURL}`} color = \"inherit\">\r\n            <GitHub  />\r\n        </IconButton>\r\n      \r\n\r\n    </div>\r\n</Toolbar>\r\n            </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const ProjectsHeaderStyles = makeStyles(() => ({\r\n\r\n    projectsHeader: {\r\n        display:'flex',\r\n        justifyContent:\"space-between\",\r\n       \r\n\r\n        \r\n      },\r\n      projectDivider:{\r\n\r\n        height:2,\r\n        marginTop:'.5em',\r\n        marginBottom:'2em',\r\n      },\r\n}))\r\n","import { Button, Divider, Typography } from '@material-ui/core'\r\nimport { AddCircle } from '@material-ui/icons'\r\nimport React from 'react'\r\nimport { ProjectsHeaderStyles } from '../styles/ProjectsHeader';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ProjectsHeader = ({toggleModal}) => {\r\n\r\n    const classes = ProjectsHeaderStyles()\r\n    \r\n    return (\r\n        <div>\r\n            <div className = {classes.projectsHeader}>\r\n           <Typography variant = \"h6\">\r\n               Projects\r\n               </Typography> <Button onClick = {toggleModal}  startIcon = {<AddCircle />} > Add Project </Button> \r\n        </div>\r\n        <Divider className ={classes.projectDivider} />\r\n        </div>\r\n    )\r\n}\r\n\r\nProjectsHeader.propTypes = {\r\n    toggleModal:PropTypes.func.isRequired\r\n}\r\nexport default ProjectsHeader\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const ProjectCardStyles = makeStyles((theme) => ({\r\n\r\n   projectCardActions:{\r\n\r\n    display:'flex',\r\n    justifyContent:\"space-between\"\r\n   },\r\n\r\n  \r\n    projectCard: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n    },\r\n\r\n    projectCardContent: {\r\n      flexGrow: 1,\r\n    },\r\n  \r\n}))\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const FormStyles = makeStyles((theme) => ({\r\n    \r\n\r\n    input:{\r\n        marginBottom:theme.spacing(1)\r\n    },\r\n\r\n    title:{\r\n\r\n        textAlign:'center'\r\n    }\r\n\r\n}))","import { TextField,Button, Dialog, DialogTitle, DialogActions, DialogContent } from '@material-ui/core'\r\nimport React,{useState,useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {FormStyles} from '../styles/Form'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst ProjectForm = ({id,name,title,toggleModal,submit,open}) => {\r\n    \r\n    const classes = FormStyles()\r\n    const history = useHistory()\r\n    const [values, setValues] = useState({name})\r\n\r\n    useEffect(() => {\r\n       \r\n       setValues({name}) \r\n     \r\n    }, [open,name])\r\n\r\n\r\n    const handleChange = (event) => {\r\n\r\n        const {target} = event\r\n        const {value,name} = target\r\n\r\n        setValues(prevState => ({...prevState,[name]:value}))\r\n\r\n    }\r\n    \r\n    \r\n    const handleSubmit = (event) => {\r\n       \r\n        event.preventDefault()\r\n       submit({id,...values},!id ? history.push : toggleModal )   \r\n       setValues({name:\"\"})\r\n    }\r\n    return (\r\n       <Dialog fullWidth open = {open} onClose = {toggleModal} >\r\n<DialogTitle className = {classes.title}>{`${title} Project`} </DialogTitle>\r\n<form onSubmit = {handleSubmit}>\r\n\r\n<DialogContent>\r\n                <TextField  onChange = {handleChange} required className = {classes.input} label = \"Name\" id = \"name\" name = \"name\" fullWidth  value = {values.name} />\r\n</DialogContent>\r\n<DialogActions>\r\n<Button onClick = {toggleModal}  type = \"button\" color = \"primary\" > {`Cancel`} </Button >\r\n<Button  type = \"submit\" color = \"primary\" > {`${title} Project`} </Button >\r\n\r\n\r\n</DialogActions>\r\n</form>\r\n\r\n       </Dialog>\r\n    )\r\n}\r\n\r\nProjectForm.propTypes = {\r\n\r\n    open: PropTypes.bool.isRequired,\r\n    toggleModal: PropTypes.func.isRequired,\r\n    title:PropTypes.string.isRequired,\r\n    id:PropTypes.string.isRequired,\r\n    name:PropTypes.string.isRequired,\r\n    submit:PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ProjectForm\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Dialog, DialogActions, DialogContentText, DialogTitle,Button,DialogContent } from '@material-ui/core'\r\n\r\nconst DeleteConfirm = ({handleDelete,open,item, toggleAlert}) => {\r\n    return (\r\n       \r\n            <Dialog open = {open} onClose = {toggleAlert}>\r\n                <DialogTitle>{`Delete ${item}`} </DialogTitle>\r\n                <DialogContent> <DialogContentText>{`Are you sure you want to delete this ${item.toLowerCase()}?`}</DialogContentText> </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick = {handleDelete} color = \"primary\" > Yes</Button>\r\n                    <Button onClick = {toggleAlert} color = \"primary\" > No</Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n        \r\n    )\r\n}\r\n\r\nDeleteConfirm.propTypes = {\r\n\r\n    handleDelete:PropTypes.func.isRequired,\r\n    open:PropTypes.bool.isRequired,\r\n    item:PropTypes.string.isRequired,\r\n    toggleAlert:PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default DeleteConfirm\r\n","export const ADDPROJECT = \"ADDPROJECT\"\r\nexport const DELETEPROJECT = \"DELETEPROJECT\"\r\nexport const UPDATEPROJECT = \"UPDATEPROJECT\"\r\n","export const ADDCOLUMN = \"ADDCOLUMN\";\r\nexport const REMOVECOLUMNS = \"REMOVECOLUMN\"\r\nexport const UPDATECOLUMN = 'UPDATECOLUMN'\r\nexport const REORDERCOLUMNS = \"REORDERCOLUMNS\"","import { v4 as uuidv4 } from 'uuid';\r\nimport {ADDCOLUMN, REMOVECOLUMNS, REORDERCOLUMNS, UPDATECOLUMN} from './ColumnTypes'\r\n\r\n/**\r\n * Add the given column object to the reducer, then close modal when added successfully with the given function\r\n * @param col the given column object\r\n * @param func the given function  \r\n */\r\nexport const addColumn = (col,func) => dispatch => {\r\n\r\n    col['id'] = uuidv4()\r\n    dispatch({type:ADDCOLUMN,payload:col})\r\n    func()\r\n}\r\n\r\n/**\r\n *Remove the columns from reducer with the given field with the given id, then close modal when removed successfully with the given function\r\n\r\n *@param {String} id the given id\r\n *@param {String} field the given field\r\n *@param func the given function\r\n */\r\n\r\nexport const removeColumns = (id,field,func) => dispatch => {\r\n\r\n\r\n    dispatch({type:REMOVECOLUMNS,payload:{id,field}})\r\n    func()\r\n}\r\n\r\n/**\r\n * Update column from reducer with the given data, then close modal when updated successfully with the given function\r\n * @param data the given data\r\n * @param func the given function\r\n */\r\n \r\n export const updateColumn = (data,func) => dispatch => {\r\n\r\n    dispatch({type:UPDATECOLUMN,payload:data})\r\n    func()\r\n }\r\n\r\n  /**\r\n  * Reorder columns with the given data\r\n  * @param data The given data\r\n  */\r\n\r\n export const reorderColumns  = data => dispatch => {\r\n\r\n  \r\n    dispatch({type:REORDERCOLUMNS,payload:data})\r\n }","export const ADDTASK = \"ADDTASK\"\r\nexport const UPDATETASK = \"UPDATETASK\"\r\nexport const REMOVETASKS = \"REMOVETASKS\"\r\nexport const REORDERTASKS = \"REORDERTASKS\"","import { ADDTASK,REMOVETASKS, REORDERTASKS, UPDATETASK } from \"./TaskTypes\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n/**\r\n * Add the given task to the reducer\r\n * @param task the given task\r\n * @param func the given function\r\n */\r\nexport const addTask = (task,func) => dispatch => {\r\n\r\n    task['id'] = uuidv4()\r\n    dispatch({type:ADDTASK,payload:task})\r\n    func()\r\n}\r\n\r\n/**\r\n * Remove the tasks from reducer with the given field with the given id, then close modal when removed successfully with the given function\r\n * @param {String} id the given id\r\n * @param {String} field the given field\r\n */\r\nexport const removeTasks = (id,field,func) => dispatch => {\r\n\r\n    dispatch({type:REMOVETASKS,payload:{id,field}})\r\n    func()\r\n}\r\n\r\n\r\n/**\r\n * Update task from reducer with the given data, then close modal when updated successfully with the given function\r\n * @param data the given data\r\n * @param func the given function\r\n */\r\n \r\n export const updateTask = (data,func) => dispatch => {\r\n\r\n    dispatch({type:UPDATETASK,payload:data})\r\n    func()\r\n }\r\n\r\n /**\r\n  * Reorder task list with the given data\r\n  * @param data The given data\r\n  */\r\n\r\n export const reorderTasks  = data => dispatch => {\r\n\r\n  \r\n    dispatch({type:REORDERTASKS,payload:data})\r\n }","import { Grid,Card,CardContent,CardActions,Button, Typography,IconButton } from '@material-ui/core'\r\nimport { Edit ,Delete} from '@material-ui/icons';\r\nimport React, {useState} from 'react'\r\nimport { ProjectCardStyles } from '../styles/ProjectCard'\r\nimport PropTypes from 'prop-types'\r\nimport ProjectForm from './ProjectForm';\r\nimport DeleteConfirm from './DeleteConfirm';\r\nimport { Link } from 'react-router-dom';\r\nimport {deleteProject,updateProject} from '../actions/projects/ProjectActions'\r\nimport { connect } from 'react-redux';\r\nimport {removeColumns} from '../actions/columns/ColumnActions'\r\nimport {removeTasks} from '../actions/tasks/TaskActions'\r\nconst ProjectCard = ({id,name,deleteProject,updateProject,removeColumns,removeTasks}) => {\r\n\r\n    const classes = ProjectCardStyles()\r\n    const [openForm, setOpenForm] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const toggleModal = () => setOpenForm(prev => !prev)\r\n    const toggleAlert = () => setOpenAlert(prev => !prev)\r\n    const closeAlert = () => setOpenAlert(false)\r\n    const handleDelete = () => {\r\n\r\n      removeTasks(id,'projectID',closeAlert)\r\n      removeColumns(id,'projectID',closeAlert)\r\n      deleteProject(id,closeAlert)\r\n      \r\n    } \r\n\r\n    return (\r\n            <Grid item key = {id} xs={12} sm={6} md={4}>\r\n\r\n              <DeleteConfirm handleDelete = {handleDelete} item = {\"Project\"} open = {openAlert} toggleAlert = {toggleAlert}/>\r\n              \r\n                <ProjectForm open = {openForm} submit = {updateProject} toggleModal = {toggleModal} title = {'Edit'}  id = {id} name = {name}/>\r\n\r\n                    <Card className={classes.projectCard}>\r\n              \r\n                  <CardContent className={classes.projectCardContent}>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                      {name}\r\n                    </Typography>\r\n      \r\n                  </CardContent>\r\n                  <CardActions className = {classes.projectCardActions}>\r\n                   <div>\r\n                   <IconButton onClick = {toggleModal} >\r\n                       <Edit />\r\n                   </IconButton>\r\n                   <IconButton onClick = {toggleAlert} >\r\n                       <Delete />\r\n                   </IconButton>\r\n                   </div>\r\n<Button to = {`project/${id}`} type = \"button\" component = {Link}> \r\n\r\nView\r\n</Button>\r\n\r\n                  </CardActions>\r\n                </Card>\r\n        </Grid>\r\n    )\r\n}\r\nconst mapDispatchToProps = {\r\n  deleteProject,\r\n  updateProject,\r\n  removeColumns,\r\n  removeTasks,\r\n\r\n}\r\nProjectCard.propTypes = {\r\n\r\n  id:PropTypes.string.isRequired,\r\n  name:PropTypes.string.isRequired,\r\n  deleteProject:PropTypes.func.isRequired,\r\n  updateProject:PropTypes.func.isRequired,\r\n  removeColumns:PropTypes.func.isRequired,\r\n  removeTasks:PropTypes.func.isRequired,\r\n}\r\nexport default connect(null,mapDispatchToProps)(ProjectCard)\r\n","import {ADDPROJECT, DELETEPROJECT, UPDATEPROJECT} from './ProjectTypes'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * Add the given project to the reducer, then navigate to the project detail page when added successfully with the given function\r\n * @param proj The given project\r\n * @param func The give function\r\n * \r\n */\r\n export const addProject =  (proj,func) => dispatch => {\r\n\r\n    proj['id'] = uuidv4()\r\n    dispatch({ type:ADDPROJECT,payload:proj})\r\n    func(`project/${proj.id}`)\r\n } \r\n\r\n /**\r\n  * Delete the project with the given id, close modal when deleted successfully with the given function\r\n  * @param {String} id The given id\r\n  * @param  func  The given function\r\n  */\r\n export const deleteProject = (id,func) => dispatch => {\r\n\r\n    dispatch({type:DELETEPROJECT,payload:id})\r\n    func()\r\n }\r\n\r\n/**\r\n * Update the project with the given data\r\n * When the update is successful, it goes back to the project detail page with the given function\r\n * @param data The given data\r\n * @param func The given function\r\n */\r\n\r\n export const updateProject = (data,func) => dispatch => {\r\n\r\n      dispatch({type:UPDATEPROJECT,payload:data})\r\n      func(`project/${data.id}`)\r\n\r\n }\r\n","import { Grid } from '@material-ui/core'\r\nimport React from 'react'\r\nimport ProjectCard from './ProjectCard'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst ProjectCards = ({projects}) => {\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing = {2}>\r\n\r\n            {projects.map(item => <ProjectCard key = {item.id} {...item} />)}\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nProjectCards.propTypes = {\r\n    projects:PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\nexport default ProjectCards\r\n","import { Container } from '@material-ui/core'\r\nimport React,{useState} from 'react'\r\nimport ProjectsHeader from '../components/ProjectsHeader'\r\nimport ProjectCards from '../components/ProjectCards'\r\nimport ProjectForm from '../components/ProjectForm';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\nimport {addProject} from '../actions/projects/ProjectActions'\r\n\r\nconst Home = ({projects,addProject}) => {\r\n\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const toggleModal = () => setOpen(prev => !prev)\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <Container component = \"main\" maxWidth=\"md\">\r\n                <div>\r\n                    <h2>Heoll</h2>\r\n                <ProjectForm id = \"\" open = {open} submit = {addProject} name = {\"\"} description = {\"\"} toggleModal = {toggleModal} title = {\"Add\"} />\r\n\r\n                    </div>\r\n<div>\r\n<ProjectsHeader toggleModal = {toggleModal} />\r\n<ProjectCards projects = {projects} />\r\n\r\n</div>\r\n\r\n        </Container>\r\n    )\r\n}\r\nconst mapDispatchToProps = {\r\n    addProject\r\n}\r\nconst mapStateToProps = (state) => ({\r\n\r\n    projects:state.projects.projects,\r\n  })\r\nHome.propTypes = {\r\n    projects:PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n    addProject:PropTypes.func.isRequired,\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps) (Home)\r\n","import React,{useState,useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { TextField,Button, Dialog, DialogTitle, DialogActions, DialogContent } from '@material-ui/core'\r\nimport { FormStyles } from '../styles/Form'\r\nimport { useParams } from 'react-router-dom'\r\nimport {COLUMN} from '../CONSTANTS'\r\nconst ColumnForm = ({open,toggleModal,name,title,submit,id}) => {\r\n\r\n    const [values, setValues] = useState({name})\r\n    const projectID = useParams().id\r\n    useEffect(() => {\r\n       \r\n        setValues({name}) \r\n      \r\n     }, [open,name])\r\n \r\n    const handleChange = (event) => {\r\n\r\n        const {target} = event\r\n        const {value} = target\r\n\r\n        setValues({name:value})\r\n    }\r\n  \r\n    const handleSubmit = (event) => {\r\n       \r\n       event.preventDefault()\r\n       submit({id,...values,projectID,type:COLUMN},toggleModal) \r\n       !id && setValues({name:\"\"})\r\n    }\r\n\r\n    const classes = FormStyles()\r\n    return (\r\n        <Dialog fullWidth open = {open} onClose = {toggleModal} >\r\n        <DialogTitle className = {classes.title}>{`${title} Column`} </DialogTitle>\r\n        <form onSubmit = {handleSubmit}>\r\n        \r\n        <DialogContent >\r\n                        <TextField onChange = {handleChange} required className = {classes.input} label = \"Name\" id = \"name\" name = \"name\" fullWidth  value = {values.name} />        \r\n        </DialogContent>\r\n        <DialogActions>\r\n        <Button onClick = {toggleModal}  type = \"button\" color = \"primary\" > {`Cancel`} </Button >\r\n        <Button  type = \"submit\" color = \"primary\" > {`${title} Column`} </Button >\r\n        \r\n        \r\n        </DialogActions>\r\n        </form>\r\n        \r\n               </Dialog>\r\n    )\r\n}\r\n\r\n\r\nColumnForm.propTypes = {\r\n\r\n    open:PropTypes.bool.isRequired,\r\n    toggleModal:PropTypes.func.isRequired,\r\n    name:PropTypes.string.isRequired,\r\n    id:PropTypes.string,\r\n    title:PropTypes.string.isRequired,\r\n    submit:PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ColumnForm\r\n\r\n","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Box, IconButton, Typography } from '@material-ui/core'\r\nimport { Delete, Edit } from '@material-ui/icons'\r\nimport DeleteConfirm from './DeleteConfirm'\r\nimport ColumnForm from './ColumnForm'\r\nimport {removeColumns} from '../actions/columns/ColumnActions'\r\nimport { connect } from 'react-redux'\r\nimport {updateColumn} from '../actions/columns/ColumnActions'\r\nimport {removeTasks} from '../actions/tasks/TaskActions'\r\n\r\nconst ColumnHeader = ({name,projectID,removeColumns,id,updateColumn,removeTasks}) => {\r\n\r\n\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [openForm, setOpenForm] = useState(false)\r\n    const toggleAlert = () => setOpenAlert(prev => !prev)\r\n    const toggleModal = () => setOpenForm(prev => !prev)\r\n   \r\n    const handleDelete = () => {\r\n\r\n        removeColumns(id,'id',toggleAlert)\r\n        removeTasks(id,'columnID',toggleAlert)\r\n      } \r\n  \r\n\r\n    return (\r\n        <Box     display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\">\r\n            <ColumnForm id = {id} projectID = {projectID} open = {openForm} toggleModal = {toggleModal} name = {name} title = \"Edit\" submit = {updateColumn} />\r\n            <DeleteConfirm open = {openAlert} handleDelete = {handleDelete} toggleAlert = {toggleAlert} item = {\"Column\"}  />\r\n<Typography style = {{overflow:'hidden',textOverflow:\"ellipsis\"}} variant =\"h6\"> {name}  </Typography>\r\n\r\n\r\n<Box display=\"flex\" alignItems=\"center\">\r\n    <IconButton onClick = {toggleAlert}  >\r\n        <Delete />\r\n    </IconButton>\r\n    <IconButton onClick = {toggleModal}>\r\n        <Edit />\r\n    </IconButton>\r\n</Box>\r\n        </Box>\r\n    )\r\n}\r\nconst mapDispatchToProps = {\r\n\r\n    removeColumns,\r\n    updateColumn,\r\n    removeTasks,\r\n}\r\nColumnHeader.propTypes = {\r\n\r\n    name:PropTypes.string.isRequired,\r\n    id:PropTypes.string.isRequired,\r\n    projectID:PropTypes.string.isRequired,\r\n    removeColumns:PropTypes.func.isRequired,\r\n    updateColumn:PropTypes.func.isRequired,\r\n    removeTasks:PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(ColumnHeader)\r\n","import React,{useState,useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { TextField,Button, Dialog, DialogTitle, DialogActions, DialogContent } from '@material-ui/core'\r\nimport { FormStyles } from '../styles/Form'\r\nimport {removeTasks} from '../actions/tasks/TaskActions'\r\nimport { connect } from 'react-redux'\r\nimport {TASK} from '../CONSTANTS'\r\nconst TaskForm = ({open,toggleModal,title,submit,id,name,description,columnID,removeTasks,projectID}) => {\r\n\r\n    const [values, setValues] = useState({name,description})\r\n\r\n    useEffect(() => {\r\n       \r\n        setValues({name,description}) \r\n      \r\n     }, [open,name,description])\r\n\r\n    const handleChange = (event) => {\r\n\r\n        const {target} = event\r\n        const {value,name} = target\r\n   \r\n\r\n        setValues(prevState => ({...prevState,[name]:value}))\r\n    }\r\n  \r\n    const handleSubmit = (event) => {\r\n       \r\n       event.preventDefault()\r\n       submit({id,...values,columnID,projectID,type:TASK},toggleModal) \r\n       setValues({name:\"\",description:\"\"})\r\n    }\r\n\r\n    const handleDelete = () => {\r\n\r\n\r\n        removeTasks(id,'id',toggleModal)\r\n    }\r\n    const classes = FormStyles()\r\n    return (\r\n        <Dialog fullWidth open = {open} onClose = {toggleModal} >\r\n        <DialogTitle className = {classes.title}>{`${title} Task`} </DialogTitle>\r\n        <form onSubmit = {handleSubmit}>\r\n        \r\n        <DialogContent >\r\n                        <TextField onChange = {handleChange} required className = {classes.input} label = \"Name\" id = \"name\" name = \"name\" fullWidth  value = {values.name} /> \r\n                        <TextField onChange = {handleChange}  className = {classes.input} label = \"Description\" id = \"description\" name = \"description\" fullWidth  value = {values.description} /> \r\n                       \r\n        </DialogContent>\r\n        <DialogActions>\r\n        <Button onClick = {toggleModal}  type = \"button\" color = \"primary\" > {`Cancel`} </Button >\r\n    \r\n        {title === \"Edit\" && <Button onClick = {handleDelete}  type = \"button\" color = \"primary\" >Delete Task</Button>}\r\n        <Button  type = \"submit\" color = \"primary\" > {`${title} Task`} </Button >\r\n\r\n        </DialogActions>\r\n        </form>\r\n        \r\n               </Dialog>\r\n    )\r\n}\r\n\r\nTaskForm.propTypes = {\r\n\r\n    open:PropTypes.bool.isRequired,\r\n    toggleModal:PropTypes.func.isRequired,\r\n    name:PropTypes.string.isRequired,\r\n    description:PropTypes.string,\r\n    id:PropTypes.string,\r\n    columnID:PropTypes.string,\r\n    title:PropTypes.string.isRequired,\r\n    submit:PropTypes.func.isRequired,\r\n    removeTasks:PropTypes.func,\r\n    projectID:PropTypes.string,\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\r\n    removeTasks,\r\n}\r\nexport default connect(null,mapDispatchToProps) (TaskForm)\r\n","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {  Card, Typography,CardContent,Box} from '@material-ui/core'\r\nimport TaskForm from './TaskForm'\r\nimport {updateTask} from '../actions/tasks/TaskActions'\r\nimport { connect } from 'react-redux'\r\nimport {  Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst TaskCard = ({name,description,id,projectID,updateTask,columnID,index}) => {\r\n    \r\n  const [open, setOpen] = useState(false)\r\n\r\n\r\n    const toggleModal = () => setOpen(prev => !prev)\r\n    return (\r\n        \r\n      <Draggable index = {index} key ={id} draggableId = {id}>\r\n        {(provided) => (<Box ref ={provided.innerRef}     {...provided.draggableProps}\r\n          {...provided.dragHandleProps} marginTop = {\"1em\"}>\r\n            \r\n            <TaskForm columnID = {columnID} projectID = {projectID} submit = {updateTask}  open = {open} title = \"Edit\" toggleModal = {toggleModal} name = {name}  id ={id} description ={description} />\r\n           \r\n                  <Card variant=\"outlined\" className =\"clickable\" onClick = {toggleModal} >\r\n       \r\n                <CardContent  >\r\n            <Box  display = 'flex'>\r\n            <Typography gutterBottom variant=\"body1\" style = {{fontWeight:\"600\"}} >\r\n                {name}\r\n              </Typography>\r\n            </Box>\r\n            <Typography gutterBottom variant=\"body2\" >\r\n            \r\n              {description}\r\n            </Typography>\r\n         \r\n          </CardContent>\r\n    \r\n                </Card>           \r\n                        \r\n        </Box>\r\n        )}\r\n      </Draggable>\r\n    )\r\n}\r\n\r\nTaskCard.propTypes = {\r\n\r\n    name:PropTypes.string.isRequired,\r\n    description:PropTypes.string,\r\n    id:PropTypes.string.isRequired,\r\n    projectID:PropTypes.string.isRequired,\r\n    updateTask:PropTypes.func.isRequired,\r\n    columnID:PropTypes.string.isRequired,\r\n    \r\n\r\n\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n  updateTask,\r\n}\r\nexport default connect(null,mapDispatchToProps)(TaskCard)\r\n","import { createSelector } from 'reselect'\r\n\r\n/**\r\n * Retrive projects from the give state\r\n * @param state the given state\r\n * @return an array of objects\r\n */\r\nconst getProjects = (state) => {\r\n    \r\n   return state.projects.projects \r\n}\r\n\r\n/**\r\n * \r\n * @param state The given state\r\n * @param obj the given object \r\n * @return The id of the given object\r\n * It does not use the given state\r\n */\r\nconst getProjectID = (state,obj) => {\r\n     \r\n    const {match} = obj\r\n    const {params} = match\r\n    const {id} = params\r\n    return id\r\n}\r\n\r\n/**\r\n * \r\n * @param state The given state\r\n * @returns An array of columns with the given state\r\n */\r\nconst getColumns = (state) => state.columns.columns\r\n\r\nexport const selectProjectColumns = createSelector(\r\n    [getColumns,getProjectID],(cols,id) => cols.filter(col => col.projectID === id )\r\n)\r\n\r\n/**\r\n * \r\n * @param state the given state\r\n * @param props the given props\r\n * @returns the id from the given props\r\n * It does not use the given state \r\n */\r\nexport const getColumnID = (state,props) => {\r\n\r\n    const {id} = props\r\n\r\n    return id\r\n}\r\n\r\n/**\r\n * \r\n * @param state The given state\r\n * @returns An array of tasks with the given state\r\n */\r\nconst getTasks = state => state.tasks.tasks\r\nexport const selectColumnTasks = createSelector(\r\n\r\n    [getColumnID,getTasks],(id,tasks) => (tasks.filter(task => task.columnID === id ))\r\n)\r\n\r\nexport const selectProject =  createSelector(\r\n\r\n        [getProjects,getProjectID], (projects,id) => {\r\n\r\n            return projects.find(item => item.id === id) || {name:\"\",sections:[]}\r\n        }\r\n    )\r\n\r\n\r\n\r\n\r\n","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ColumnHeader from './ColumnHeader'\r\nimport { Box, Button,Card,CardContent } from '@material-ui/core'\r\nimport { Add } from '@material-ui/icons'\r\nimport TaskCard from './TaskCard'\r\nimport TaskForm from './TaskForm'\r\nimport {addTask} from '../actions/tasks/TaskActions'\r\nimport { connect } from 'react-redux'\r\nimport {selectColumnTasks} from '../selectors'\r\nimport { Droppable,Draggable } from 'react-beautiful-dnd';\r\nimport {TASK} from '../CONSTANTS'\r\nconst Column = ({name,id,tasks,projectID,addTask,index}) => {\r\n       \r\n    const [openTask, setOpenTask] = useState(false)\r\n    const toggleTaskModal = () => setOpenTask(prev => !prev)\r\n\r\n\r\n    return (\r\n      <Draggable draggableId = {id} index = {index}>\r\n        {(provided) => (\r\n\r\n<Box height = \"fit-content\" ref ={provided.innerRef}     {...provided.draggableProps}\r\n          {...provided.dragHandleProps} width = \"280px\"  marginRight= \".5em\" >\r\n<Card>\r\n<CardContent>\r\n<TaskForm projectID = {projectID} columnID = {id}  name = \"\" id = \"\" submit = {addTask} toggleModal = {toggleTaskModal} open={openTask} description = \"\" title =\"Add\"   />\r\n <ColumnHeader projectID = {projectID} id = {id} name = {name} />\r\n <Button style = {{marginBottom:'1em',marginTop:'1em'}} onClick = {toggleTaskModal} variant = \"outlined\" size = \"small\" fullWidth startIcon = {<Add/>}> Add Task </Button>\r\n <Droppable type = {TASK} droppableId = {id} index = {index} > \r\n{(provided) => (\r\n     <Box ref={provided.innerRef} {...provided.droppableProps}>\r\n     {(tasks && tasks.map((item,index) => (<TaskCard index = {index} columnID = {id} projectID = {projectID} key = {item.id} {...item} />)  ))}\r\n     {provided.placeholder}\r\n\r\n     </Box>\r\n)}\r\n     </Droppable>\r\n     \r\n\r\n</CardContent>\r\n</Card>\r\n\r\n\r\n</Box>\r\n        )}\r\n      </Draggable>\r\n      )\r\n}\r\n\r\nColumn.propTypes = {\r\nname:PropTypes.string.isRequired,\r\nid:PropTypes.string.isRequired,\r\ntasks:PropTypes.arrayOf(PropTypes.object.isRequired),\r\nprojectID:PropTypes.string.isRequired,\r\naddTask:PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = (state,ownProps) => ({\r\n\r\n    tasks:selectColumnTasks(state,ownProps)\r\n  })\r\nconst mapDispatchToProps = {\r\n    \r\n    addTask,\r\n  }\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Column)\r\n","import { Box, Button,Card,CardContent } from '@material-ui/core'\r\nimport { Add } from '@material-ui/icons'\r\nimport React from 'react'\r\nimport ColumnForm from './ColumnForm'\r\nimport PropTypes from 'prop-types'\r\nimport {addColumn} from '../actions/columns/ColumnActions'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst ColumnAdder = ({open,toggleModal,addColumn}) => {\r\n\r\n   \r\n    return (\r\n        <Box width = \"280px\" marginRight= \".5em\" > \r\n        <ColumnForm  open = {open} toggleModal = {toggleModal} name = \"\" title = \"Add\" submit = {addColumn} />\r\n\r\n<Card >\r\n    <CardContent>\r\n    <Button style = {{marginTop:\".4em\"}} onClick = {toggleModal} startIcon = {<Add />}> Add Section </Button>\r\n    </CardContent>\r\n</Card>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n    addColumn,\r\n  }\r\nColumnAdder.propTypes = {\r\n\r\n    addColumn:PropTypes.func.isRequired\r\n}\r\nexport default connect(null,mapDispatchToProps)(ColumnAdder)\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const GlobalStyles = makeStyles((theme) => ({\r\n\r\n    container: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      },\r\n   \r\n      btn: {\r\n        margin: theme.spacing(3, 0, 2),\r\n      },\r\n\r\n      title:{\r\n          margin:theme.spacing(2,0)\r\n      },\r\n\r\n      toolbar: theme.mixins.toolbar,\r\n   \r\n}))","import { Box, Button, Container, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { GlobalStyles } from '../styles/Global'\r\nimport {BASEURL} from '../CONSTANTS'\r\nconst NotFound = () => {\r\n\r\n    const classes = GlobalStyles()\r\n    return (\r\n       \r\n        <Container  maxWidth = \"sm\">\r\n        <Box display = \"flex\" flexDirection = \"column\" alignItems = \"center\">\r\n        <Typography variant = \"h1\">\r\n                404\r\n            </Typography>\r\n            <Typography variant = \"h3\">\r\nSorry, Page Not Found\r\n            </Typography>\r\n            <Button className = {classes.btn} to = {BASEURL} variant = \"contained\" color = \"primary\" component = {Link} >\r\n                Go Back Home\r\n            </Button>\r\n        </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import { Box,Typography } from '@material-ui/core'\r\nimport React,{useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Column from '../components/Column'\r\nimport ColumnAdder from '../components/ColumnAdder'\r\nimport {selectProject,selectProjectColumns} from '../selectors'\r\nimport PropTypes from 'prop-types'\r\nimport { DragDropContext,Droppable } from 'react-beautiful-dnd';\r\nimport {reorderTasks} from '../actions/tasks/TaskActions'\r\nimport {reorderColumns} from '../actions/columns/ColumnActions'\r\nimport { COLUMN, TASK } from '../CONSTANTS'\r\nimport NotFound from './NotFound'\r\n\r\nconst Project = ({project,match,columns,reorderTasks,reorderColumns}) => {\r\n\r\n    \r\n    const {name} = project\r\n    const [openForm, setOpenForm] = useState(false)\r\n    const toggleModal = () => setOpenForm(prev => !prev)\r\n    const {params} = match\r\n    const {id} = params\r\n\r\n   if (name === \"\") {\r\n     \r\n    return <NotFound />\r\n   }\r\n\r\n    /**\r\n     * Reorder item depending on the given object type\r\n     * @param obj  The given object\r\n     */\r\n    const handleDrag = (obj) => {\r\n\r\n      const {destination,source} = obj\r\n      if (destination) {\r\n\r\n        \r\n        if (!(destination.droppableId === source.droppableId && destination.index === source.index)) {\r\n          \r\n          obj.type === TASK ? reorderTasks(obj) : reorderColumns(obj)\r\n\r\n        }\r\n        \r\n      }\r\n\r\n\r\n  \r\n\r\n    }\r\n    \r\n\r\n    return (\r\n       <Box  >\r\n          <Box  display = \"flex\" justifyContent = \"space-between\" >\r\n          <Typography  variant = \"h4\" >\r\n              {name}\r\n           </Typography>\r\n          </Box>\r\n\r\n       \r\n        <Box >\r\n        <Box marginTop = \"1em\" display =\"flex\" width = \"fit-content\" >\r\n<DragDropContext onDragEnd = {handleDrag} >\r\n\r\n<Droppable droppableId = \"all-columns\" type = {COLUMN} direction = \"horizontal\" >\r\n{ (provided) => (<Box display = \"flex\" ref={provided.innerRef} {...provided.droppableProps}>  \r\n\r\n\r\n{ \r\n  columns && columns.map((item,index) => <Column index = {index}  projectID = {id} key = {item.id} {...item} />)  \r\n}\r\n{provided.placeholder}\r\n\r\n</Box>) }\r\n\r\n</Droppable>\r\n</DragDropContext>\r\n          <ColumnAdder open = {openForm} toggleModal = {toggleModal}/>\r\n          </Box>\r\n \r\n        </Box>\r\n       </Box>\r\n    )\r\n}\r\nconst mapStateToProps = (state,ownProps) => ({\r\n\r\n  project:selectProject(state,ownProps),\r\n  columns:selectProjectColumns(state,ownProps)\r\n\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n  reorderTasks,\r\n  reorderColumns,\r\n\r\n}\r\nProject.propTypes = {\r\n  project:PropTypes.object.isRequired,\r\n  columns:PropTypes.arrayOf(PropTypes.object),\r\n  reorderTasks:PropTypes.func.isRequired,\r\n  reorderColumns:PropTypes.func.isRequired,\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps) (Project)\r\n","import { ADDPROJECT, DELETEPROJECT,  UPDATEPROJECT } from \"../actions/projects/ProjectTypes\"\r\n\r\nconst intialState = {\r\n    projects:[],\r\n}\r\n\r\nexport const projectReducer = (state = intialState,{type,payload}) => {\r\n\r\n\r\n    switch (type) {\r\n\r\n        case ADDPROJECT:\r\n\r\n        return {...state,projects:[payload,...state.projects]}\r\n\r\n        case UPDATEPROJECT:\r\n\r\n        return {...state,projects:state.projects.map(item => item.id === payload.id ? payload : item )}\r\n\r\n        case DELETEPROJECT:\r\n\r\n         return {...state,projects:state.projects.filter(item => item.id !== payload)}\r\n\r\n \r\n    \r\n        default:\r\n            return state\r\n    }\r\n}","import {ADDCOLUMN, REMOVECOLUMNS, UPDATECOLUMN,REORDERCOLUMNS} from '../actions/columns/ColumnTypes'\r\n\r\nconst initalState = {columns:[]}\r\n\r\nexport const columnReducer = (state = initalState,{type,payload}) => {\r\n\r\n    switch (type) {\r\n\r\n        case ADDCOLUMN:\r\n\r\n        return  {...state,columns:[...state.columns,payload]}\r\n\r\n        case REMOVECOLUMNS:\r\n\r\n        const {id,field} = payload\r\n        return {...state,columns:state.columns.filter(item => item[field] !== id )}\r\n\r\n        case UPDATECOLUMN:\r\n\r\n        return {...state,columns:state.columns.map(item => item.id === payload.id ? payload : item )}\r\n\r\n        case REORDERCOLUMNS:\r\n\r\n   const {draggableId,destination} = payload\r\n\r\n\r\n   let columns = [...state.columns]\r\n   let column = columns.findIndex(col => col.id === draggableId)\r\n   column =columns.splice(column,1)[0]\r\n   columns = columns.filter(col => col.projectID === column.projectID)\r\n   columns.splice(destination.index, 0, column)\r\n   return {...state,columns:[...state.columns.filter(col => col.projectID !== column.projectID ),...columns]}\r\n            \r\n            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}","import { ADDTASK, REMOVETASKS, REORDERTASKS, UPDATETASK } from \"../actions/tasks/TaskTypes\";\r\n\r\nconst initialState = {tasks:[]}\r\n\r\nexport const taskReducer = (state = initialState,{payload,type}) => {\r\n\r\nswitch (type) {\r\n\r\n    case ADDTASK:\r\n        \r\n        return {...state,tasks:[...state.tasks,payload]};\r\n\r\n    case UPDATETASK:\r\n\r\n    return {...state,tasks:state.tasks.map(task => task.id === payload.id ? payload : task)}\r\n    \r\n    case REMOVETASKS:\r\n\r\n    const {id,field} = payload\r\n    return {...state,tasks:state.tasks.filter(task =>  task[field] !== id ) }\r\n\r\n    case REORDERTASKS:\r\n\r\n   const {draggableId,destination} = payload\r\n\r\n\r\n   let tasks = [...state.tasks]\r\n   let task = tasks.findIndex(task => task.id === draggableId)\r\n   task =tasks.splice(task,1)[0]\r\n   task.columnID = destination.droppableId\r\n   tasks.splice(destination.index, 0, task)\r\n\r\n   return {...state,tasks}\r\n\r\n    default:\r\n        return state;\r\n}\r\n}","import { combineReducers } from \"redux\";\r\nimport { projectReducer } from \"./ProjectReducer\";\r\nimport {columnReducer} from './ColumnReducer'\r\nimport { taskReducer } from \"./TaskReducer\";\r\n\r\n export default  combineReducers({projects:projectReducer,columns:columnReducer,tasks:taskReducer})","import { createStore,applyMiddleware,compose } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport thunk from 'redux-thunk'\r\nimport storage from 'redux-persist/lib/storage' \r\n\r\nimport rootReducer from './reducers'\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n\r\nconst intialState = {};\r\nconst middleware = [thunk];\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst persistedReducer = persistReducer(persistConfig,rootReducer)\r\nexport const store = createStore(persistedReducer,intialState, composeEnhancers(applyMiddleware(...middleware)))\r\nexport const persistor = persistStore(store)\r\n","import { BrowserRouter as Router, Route, Switch,} from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport Project from './pages/Project'\r\nimport { GlobalStyles } from './styles/Global';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './Store';\r\nimport NotFound from './pages/NotFound';\r\nimport { BASEURL } from './CONSTANTS';\r\n\r\n\r\nfunction App() {\r\n  const  classes = GlobalStyles()\r\n  return (\r\n   <Provider store = {store}>\r\n <div className=\"app-container\">\r\n      <Router>\r\n        <Header />\r\n        <div className = {classes.toolbar} />\r\n        <div className = \"app-content\" >\r\n\r\n          <Switch>\r\n          <Route exact path = {BASEURL} component = {Home} />\r\n          <Route path = \"/project/:id\" component = {Project}  />\r\n          <Route path=\"*\"  component = {NotFound}/>\r\n          </Switch>\r\n\r\n        </div>\r\n      </Router>\r\n    </div>\r\n   </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}